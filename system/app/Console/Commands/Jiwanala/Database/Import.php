<?php

namespace App\Console\Commands\Jiwanala\Database;

use Illuminate\Console\Command;

class Import extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'jiwanala-db:import 
		{schema* : database schema, example: schema_name.database_name / schema.*}
		{--con-host=		: connection host. default localhost} 
		{--con-username=	: connection username} 
		{--con-password=	: connection password}
		{--con-no-password	: connection use no password for given username}
		{--con-driver=		: connection driver}
		{--con-query-limit= : query limit. default 1000 records}
		{--import-version= 	: signature time for export key. Refer to directory name in storage/app/database/}
		{--import-mode= 	: SQL or JSON. Default JSON}
		{--except=*			: given schema table will not imported}
	';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Run sql script generated by jiwanala-db:export in storage folder';
	
	protected $host = 'localhost';
	protected $driver = 'mysql';
	protected $username;
	protected $password;
	protected $dir = '';
	protected $storagePath = 'database';
	
	/**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }
	
	function getHost(){ 
		$this->host = $this->option('con-host')? $this->option('con-host') : $this->host;
		return $this->host;
	}
	
	function getDriver(){ 
		$this->driver = $this->option('con-driver')? $this->option('con-driver') : $this->driver;
		return $this->driver;
	}
	
	function getUsername(){
		$this->username = $this->option('con-username')? $this->option('con-username') : $this->ask('Connection Username');
		return $this->username;
	}
	
	function getPassword(){
		if (!$this->option('con-no-password')){
			$this->password = $this->option('con-password')? $this->option('con-password') : $this->ask('Connection Password');			
		}
		return $this->password;
	}
	
	function getVersion(){
		$version = $this->option('import-version');
		if ($version){
			return $version;
		}
		
		//no given version		
		//get latest version folder
		$versions = [];
		foreach(\Storage::disk('local')->directories($this->storagePath) as $dir){
			$versions[] = str_replace('database/','',$dir);
		}
		return $versions[count($versions)-1];
	}

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle(){
		//check username & password
		$this->getUsername();
		$this->getPassword();
		
		$mode = $this->getMode();
		$this->infoStart();
		
		foreach($this->argument('schema') as $schema){
			
			$schemaInfo = array_combine(['schema','table'], explode('.', $schema));
			
			foreach($this->getFiles() as $file){	
				
				if ($this->isMatchSchema($schemaInfo, $file)){
					
					if ($mode == 'sql'){					
						//read & import sql 
						$this->infoRead($file);
						$this->getConnection($schemaInfo['schema'])->unprepared($this->read($file));
						$this->infoReadSuccess();
					}
				
					//json
					else{
						$this->handleJSON($this->getConnection($schemaInfo['schema']), $file);
					}
				}
			}
			
		}
		
		$this->infoEnd();
    }
	
	function handleJSON($db, $file){
		$json = json_decode($this->read($file), true);
		if (isset($json['records']) && count($json['records'])>0){
			$str = $json['database']['schema'].'.'.$json['database']['table'];
			$this->infoRead($str.' : '.count($json['records']).' records');
			
			$rcount = count($json['records']);
			
			$db->statement('SET GLOBAL max_allowed_packet=1073741824');
			$db->statement('SET FOREIGN_KEY_CHECKS=0');
			$db->beginTransaction();
			for($i=0; $i<$rcount; $i++){
				//check if column value type need to be encode to base64
				foreach($json['columns'] as $col=>$type){
					if (str_contains($type, 'blob')){
						$json['records'][$i][$col] = base64_decode($json['records'][$i][$col]);
					}
				}
				
				//insert
				
				$db->table($json['database']['schema'].'.'.$json['database']['table'])->insert($json['records'][$i]);
			}
			$db->commit();
			$db->statement('SET FOREIGN_KEY_CHECKS=1');
			$this->infoReadSuccess();
		}
	}
	
	
	function isMatchSchema(Array $schemaInfo, $file){
		//check given exception, if except schema table, we return false;
		$exceptSchemaTable = $this->option('except');
		foreach($exceptSchemaTable as $exception){
			$arr = explode('.',$exception);
			if (count($arr)==2 && str_contains($file, $arr[0].'_'.$arr[1])) return false;
		}
		
		//if given schema has asterix characters
		//select all tables in schema
		if ($schemaInfo['table'] == '*'){
			return str_contains($file, $schemaInfo['schema']);
		}
		
		//match table schema
		return str_contains($file, $schemaInfo['schema'].'_'.$schemaInfo['table']);
	}
	
	function infoStart(){
		echo PHP_EOL .
			"\033[36m". "Start "."\033".
			"\033[37m". "Import "."\033". PHP_EOL .
			"\033[37m". "Use Version : "."\033".
			"\033[36m". $this->getVersion() ."\033".
			"[0m". PHP_EOL;
	}
	
	function infoEnd(){
		echo "\033[36m". "Done "."\033".
			"[0m". "Import ". PHP_EOL;
	}
	
	function infoRead($str){
		echo "\033[37m". "Importing "."\033".
			"\033[32m". $str ."\033";
	}
	
	function infoReadSuccess(){
		echo "\033[37m". " : "."\033".
			"\033[36m". "Success"."\033".
			"[0m". PHP_EOL;
	}
	
	function getConnection($schema){
		$key = 'lazy_'.$schema;
		config([
			'database.connections.'.$key => [
				'driver' => 	$this->getDriver(),
				'host' => 		$this->getHost(),
				'username' => 	$this->getUsername(),
				'password' => 	$this->getPassword(),
				'database' => 	$schema,
			]
		]);
		return \DB::connection($key);
	}
	
	function getFiles(){
		return \Storage::disk('local')->files($this->storagePath.'/'.$this->getVersion());
	}
	
	function read($file){
		return \Storage::disk('local')->read($file);
	}
	
	function getMode(){
		return $this->option('import-mode')? $this->option('import-mode') : 'json';
	}
}
